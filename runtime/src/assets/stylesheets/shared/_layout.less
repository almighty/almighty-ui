///////////////////////////
// Utility styles
///////////////////////////
@import (reference) './../../../../node_modules/patternfly/node_modules/bootstrap/less/variables';
@import (reference) './../../../../node_modules/patternfly/src/less/variables';

.padding-loop(@i) when (@i > 0) {
  .padding-@{i} { padding: (1px * @i) !important; }
  .padding-top-@{i} { padding-top: (1px * @i) !important; }
  .padding-left-@{i} { padding-left: (1px * @i) !important; }
  .padding-bottom-@{i} { padding-bottom: (1px * @i) !important; }
  .padding-right-@{i} { padding-right: (1px * @i) !important; }
  .padding-loop(@i - 1);
}
.padding-loop(15);

.margin-loop(@i) when (@i > 0) {
  .margin-v { margin: (1px * @i) !important; }
  .margin-top-@{i} { margin-top: (1px * @i) !important; }
  .margin-left-@{i} { margin-left: (1px * @i) !important; }
  .margin-bottom-@{i} { margin-bottom: (1px * @i) !important; }
  .margin-right-@{i} { margin-right: (1px * @i) !important; }
  .margin-loop(@i - 1);
}
.margin-loop(15);

@include: padding-x;
@include: margin-x;

.width-100 { width: 100%; }
.height-100 { height: 100%; }
.overflow-auto{ overflow: auto; }
.fill-container {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 0;
  margin: 0;
  border-width: 0;
  height:100%;
}

///////////////////////
// Styles relating to general html document
///////////////////////
* { box-sizing: border-box; }
body {
  position: relative;
  display: flex;
  // Ensure that body element height at 'least' fills the viewport.
  // This means it can grow beyond, but wont be less
  min-height:100vh;
  padding: 0;
  margin: 0;
  //.debug-stretch-to-fit-viewport;
}

//////////////////////
// flex utility styles
//////////////////////
.flex-grow-loop(@i) when (@i > 0) {
  .flex-grow-@{i} {
    flex: @i !important;
  }
  .flex-grow-loop(@i - 1);
}
.flex-grow-loop(12);
// create 12 flex grow partitions
@include: flex-grow-x(12);
.flex-container {
  display:flex;
  &.in-column-direction { flex-direction: column; }
  &.in-row-direction  { flex-direction: row; }
  &.with-wrap { flex-wrap: wrap; }
  // Make sure the main,section,aside parts fill the screen and collapse header and footer if not there
  >main,
  section,
  aside { &:extend(.flex-grow-1); }
  >.container-fluid {
    position: relative;
    width: 100%;
    flex-grow: 1;
  }
}
.app {
  &:extend(.flex-grow-1);
  &:extend(.flex-container);
};
// an app component is a marker class for angular component dom elements
.app-component
{//root app component
  &.app {
    // Note: making relative positioning helps positioning but creates extra margins
    // on nested components, but it offers good absolute positioning options for
    // child elements
    position: relative;
    >header { }
    >main { }
    >footer {
      .footer {
        font-size: @font-size-small;
        text-align: center;
        border-top: 1px solid;
        border-top-color: @color-pf-blue-300;
      }
    }
  }
  // when app-component is the child of a bootstrap column div
  div[class^="col-"] & {
    // margin-left:-@grid-gutter-width/2;
    // margin-right:-@grid-gutter-width/2;
  }
  div[class*=" col-"] & {
    // margin-left:-@grid-gutter-width/2;
    // margin-right:-@grid-gutter-width/2;
  }
};
@content-padding: 0;
header { padding: @content-padding; }
footer { padding: @content-padding; }
// helps to ensure that scrolling does not cross app footer or header
// the reason for not using flex is that view will not always be a flex-container
// This plays out in scenarios where view requires animation like slide ins/slie outs
// These are not good for flex
.view-container { position:relative;
  >.view { //&:extend(.fill-container);
    &.with-rows {
      padding-right: @grid-gutter-width/2;
      padding-left: @grid-gutter-width/2;
    }
    >main,
    section,
    aside {
      padding: @content-padding;
      //overflow: auto;
    }
    >.view-content {
      position: relative;
      padding-top: @content-padding;
    }
  }
}
.dropdown {
  a:hover { text-decoration: none; }
}
// chromeless dialog suppresses all chrome in the ng2-bootstrap modal component
/*.chromeless-modal {
  .modal-content {
    display: flex;
    padding: 0;
    margin: 0;
    border: solid 0;
    border-color: lime;
    .modal-header { display:none; }
    .modal-footer {  display:none; }
    .modal-body {
      display: flex;
      padding: 0;
      border: solid 0;
      border-color: orangered;
      flex: 1;
      .chromeless-modal-content {
        display: flex;
        padding: 0;
        border: solid 0;
        border-color: brown;
        flex: 1;
      }
    }
  }
}*/
// wizard
@wizard-padding: @grid-gutter-width/2;

/*.wizard-container {
  position: relative;
  display: flex;
  border: solid 0;
  border-color: orange;
  flex: 1;
  .wizard {
    position: relative;
    display: flex;
    padding: 0;
    padding-bottom: @wizard-padding;
    border: solid 0;
    border-color: darkorange;
    flex: 1;
    .wizard-step {
      display: none;
      // at least 50% of view height
      min-height: 50vh;
      border: solid 0;
      border-color: olivedrab;
      flex: 1;
      &.active {
        display: flex;
        flex-direction: column;
      }
      >header {
        position: relative;
        display: flex;
        padding: @wizard-padding;
        background-color: @navbar-default-bg;
        justify-content: center;
      }
      >section {
        position: relative;
        display: flex;
        flex: 1;
      }
      >footer {
        position: relative;
        display: flex;
        padding: @wizard-padding;
        padding-bottom: 0;
        justify-content: flex-end;
      }
    }
  }
}*/
